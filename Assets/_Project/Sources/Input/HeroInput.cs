//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/_Project/Sources/Input/HeroInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @HeroInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HeroInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HeroInput"",
    ""maps"": [
        {
            ""name"": ""Common"",
            ""id"": ""46aebcdc-4f20-4097-a66f-ab2c65720400"",
            ""actions"": [
                {
                    ""name"": ""StopAction"",
                    ""type"": ""Button"",
                    ""id"": ""d6a6a6b3-59d4-4344-9462-04ead4c81308"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32f7309d-961a-4a68-9931-cc7b399e5f49"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AbilitiesHotKeys"",
            ""id"": ""1bf33ea5-afc3-4b7a-848f-51f8b7eb9d80"",
            ""actions"": [
                {
                    ""name"": ""Use1"",
                    ""type"": ""Button"",
                    ""id"": ""8b53ab07-4cdb-4281-9cf3-1e5f9e9a8eb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use2"",
                    ""type"": ""Button"",
                    ""id"": ""015fc725-df2c-4531-ac12-d65967bafffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use3"",
                    ""type"": ""Button"",
                    ""id"": ""b7453304-f40c-4e1e-9168-26b0b04cbee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use4"",
                    ""type"": ""Button"",
                    ""id"": ""9ea0aa50-28db-4c1e-a21a-3246719545fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d46d8e47-974a-4444-88c1-718b3481cd13"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55f6433-07de-4a45-ad9f-396d79c69d51"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d6b0c77-5110-4f51-8d25-fd5de92d81c6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ddf471-bdf4-4c9b-b1f2-120979f9a033"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Common
        m_Common = asset.FindActionMap("Common", throwIfNotFound: true);
        m_Common_StopAction = m_Common.FindAction("StopAction", throwIfNotFound: true);
        // AbilitiesHotKeys
        m_AbilitiesHotKeys = asset.FindActionMap("AbilitiesHotKeys", throwIfNotFound: true);
        m_AbilitiesHotKeys_Use1 = m_AbilitiesHotKeys.FindAction("Use1", throwIfNotFound: true);
        m_AbilitiesHotKeys_Use2 = m_AbilitiesHotKeys.FindAction("Use2", throwIfNotFound: true);
        m_AbilitiesHotKeys_Use3 = m_AbilitiesHotKeys.FindAction("Use3", throwIfNotFound: true);
        m_AbilitiesHotKeys_Use4 = m_AbilitiesHotKeys.FindAction("Use4", throwIfNotFound: true);
    }

    ~@HeroInput()
    {
        Debug.Assert(!m_Common.enabled, "This will cause a leak and performance issues, HeroInput.Common.Disable() has not been called.");
        Debug.Assert(!m_AbilitiesHotKeys.enabled, "This will cause a leak and performance issues, HeroInput.AbilitiesHotKeys.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Common
    private readonly InputActionMap m_Common;
    private List<ICommonActions> m_CommonActionsCallbackInterfaces = new List<ICommonActions>();
    private readonly InputAction m_Common_StopAction;
    public struct CommonActions
    {
        private @HeroInput m_Wrapper;
        public CommonActions(@HeroInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @StopAction => m_Wrapper.m_Common_StopAction;
        public InputActionMap Get() { return m_Wrapper.m_Common; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
        public void AddCallbacks(ICommonActions instance)
        {
            if (instance == null || m_Wrapper.m_CommonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommonActionsCallbackInterfaces.Add(instance);
            @StopAction.started += instance.OnStopAction;
            @StopAction.performed += instance.OnStopAction;
            @StopAction.canceled += instance.OnStopAction;
        }

        private void UnregisterCallbacks(ICommonActions instance)
        {
            @StopAction.started -= instance.OnStopAction;
            @StopAction.performed -= instance.OnStopAction;
            @StopAction.canceled -= instance.OnStopAction;
        }

        public void RemoveCallbacks(ICommonActions instance)
        {
            if (m_Wrapper.m_CommonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommonActions instance)
        {
            foreach (var item in m_Wrapper.m_CommonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommonActions @Common => new CommonActions(this);

    // AbilitiesHotKeys
    private readonly InputActionMap m_AbilitiesHotKeys;
    private List<IAbilitiesHotKeysActions> m_AbilitiesHotKeysActionsCallbackInterfaces = new List<IAbilitiesHotKeysActions>();
    private readonly InputAction m_AbilitiesHotKeys_Use1;
    private readonly InputAction m_AbilitiesHotKeys_Use2;
    private readonly InputAction m_AbilitiesHotKeys_Use3;
    private readonly InputAction m_AbilitiesHotKeys_Use4;
    public struct AbilitiesHotKeysActions
    {
        private @HeroInput m_Wrapper;
        public AbilitiesHotKeysActions(@HeroInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Use1 => m_Wrapper.m_AbilitiesHotKeys_Use1;
        public InputAction @Use2 => m_Wrapper.m_AbilitiesHotKeys_Use2;
        public InputAction @Use3 => m_Wrapper.m_AbilitiesHotKeys_Use3;
        public InputAction @Use4 => m_Wrapper.m_AbilitiesHotKeys_Use4;
        public InputActionMap Get() { return m_Wrapper.m_AbilitiesHotKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilitiesHotKeysActions set) { return set.Get(); }
        public void AddCallbacks(IAbilitiesHotKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_AbilitiesHotKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbilitiesHotKeysActionsCallbackInterfaces.Add(instance);
            @Use1.started += instance.OnUse1;
            @Use1.performed += instance.OnUse1;
            @Use1.canceled += instance.OnUse1;
            @Use2.started += instance.OnUse2;
            @Use2.performed += instance.OnUse2;
            @Use2.canceled += instance.OnUse2;
            @Use3.started += instance.OnUse3;
            @Use3.performed += instance.OnUse3;
            @Use3.canceled += instance.OnUse3;
            @Use4.started += instance.OnUse4;
            @Use4.performed += instance.OnUse4;
            @Use4.canceled += instance.OnUse4;
        }

        private void UnregisterCallbacks(IAbilitiesHotKeysActions instance)
        {
            @Use1.started -= instance.OnUse1;
            @Use1.performed -= instance.OnUse1;
            @Use1.canceled -= instance.OnUse1;
            @Use2.started -= instance.OnUse2;
            @Use2.performed -= instance.OnUse2;
            @Use2.canceled -= instance.OnUse2;
            @Use3.started -= instance.OnUse3;
            @Use3.performed -= instance.OnUse3;
            @Use3.canceled -= instance.OnUse3;
            @Use4.started -= instance.OnUse4;
            @Use4.performed -= instance.OnUse4;
            @Use4.canceled -= instance.OnUse4;
        }

        public void RemoveCallbacks(IAbilitiesHotKeysActions instance)
        {
            if (m_Wrapper.m_AbilitiesHotKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbilitiesHotKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_AbilitiesHotKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbilitiesHotKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbilitiesHotKeysActions @AbilitiesHotKeys => new AbilitiesHotKeysActions(this);
    public interface ICommonActions
    {
        void OnStopAction(InputAction.CallbackContext context);
    }
    public interface IAbilitiesHotKeysActions
    {
        void OnUse1(InputAction.CallbackContext context);
        void OnUse2(InputAction.CallbackContext context);
        void OnUse3(InputAction.CallbackContext context);
        void OnUse4(InputAction.CallbackContext context);
    }
}
